#!/usr/bin/env perl
# Author: Traian Nedelea <tron1point0@gmail.com>

use v5.10;
#use v5.14;
#use warnings;

my $target = 200;   # I keep forgetting to pass it the target >_<
$ARGV[0] and $ARGV[0] =~ /^\d+$/ and $target = shift @ARGV;

my $magic = log 2;     # Yes, it is.

sub find (&\@) {
    my ($cmp,$arr) = @_;
    return 0 if @$arr == 0;
    my $thresh = int(log(@$arr) / $magic);
    my $c = $cmp->($arr->[$thresh]);
    return $thresh if $c == 0;
    return _find_linear($cmp,$arr,$thresh) if $c < 0;
    _find($cmp,$arr,0,$#$arr);
}

sub _find_linear {
    my ($cmp,$arr,$stop) = @_;
    for (0 .. $stop) {
        return $_ if $cmp->($arr->[$_]) <= 0;
    }
}

sub _find {
    my ($cmp,$arr,$left,$right) = @_;
    until ($left == $right) {
        my $c_right = $cmp->($arr->[$right]);
        return $right if $c_right == 0;
        return $right + 1 if $c_right > 0;
        my $middle = $left + int(($right-$left)/2);
        my $c_mid = $cmp->($arr->[$middle]);
        return $middle if $c_mid == 0;
        $right = $middle, next if $c_mid < 0;
        $left = $middle + 1, next if $c_mid > 0;
    }
    return $left;
}

sub insert (\@$$) {
    my ($arr,$pos,$elem) = @_;
    splice @$arr, $pos, 0, $elem;
}

sub remove (\@$) {
    my ($arr,$pos) = @_;
    splice @$arr, $pos, 1;
}

# Do the voodoo
sub trade {
    my ($remain,$cost) = ($target,0);
    my ($time,$list) = @_;
    for my $i (0 .. @$list) {
        my ($price,$size,$ts) = @{$list->[$i]};
        remove(@$list,$i--),next if $ts + 60 < $time;
        $cost += $price * ($size <= $remain ? $size : $remain);
        $remain -= $size;
        last if $remain <= 0;
    }
    use integer;
    return sprintf "%d.%02d", $cost/100, $cost%100 unless $remain > 0;
    return 'NA';
}

my @bids;
my @asks;

# If we don't know the specific filter to use
my %list_for = (
    S => \@bids,
    B => \@asks,
);

my %mod = (
    S => -1,
    B => 1,
);

# Swap 'em for the output (You buy other peoples' sells)
my %other = (
    S => 'B',
    B => 'S',
);

my %orders;

my %types = (
    # Add and remove are mapped to their input stream definitions because it's
    # easier that way
    A => sub {
        my ($time,$orderId,$side,$price,$size) = @_;
        $price *= 100;

        # Caching the side because removals don't specify it
        $orders{$orderId} = {
            side => $side,
            size => $size,
            price => $price,
        };

        my $list = $list_for{$side};
        my $modifier = $mod{$side};
        my $pos = find {$modifier * ($_[0][0] <=> $price)} @$list;

        if (defined $list->[$pos] && $list->[$pos][0] == $price) {
            $list->[$pos][1] += $size;
            $list->[$pos][2] = $time;
        } else {
            insert @$list, $pos, [$price,$size,$time];
        }

        my $trade = trade($time,$list);
        return $other{$side}, $trade;
    },
    R => sub {
        my ($time,$orderId,$size) = @_;

        my $order = $orders{$orderId};
        my $side = $order->{side};
        my $price = $order->{price};
        my $list = $list_for{$side};

        my $modifier = $mod{$side};
        my $pos = find {$modifier * ($_[0][0] <=> $price)} @$list;

        if (defined $list->[$pos] && $list->[$pos][0] == $price) {
            $list->[$pos][1] -= $size;
            $list->[$pos][2] = $time;
            $order->{size} -= $size;
            delete $orders{$orderId} if $order->{size} <= 0;
            remove @$list, $pos if $list->[$pos][1] <= 0;
        }

        my $trade = trade($time,$list);
        return $other{$side}, $trade;
    },
);

# Don't tell me what I already know
my %last = (
    S => 'NA',
    B => 'NA',
);

while (<>) {    # *Cackle*
    my ($time,$type,@args) = split ' ', $_;

    my ($side, $value) = $types{$type}->($time,@args);
    print join(' ', $time, $side, $value),"\n" if $last{$side} ne $value;
    $last{$side} = $value if $side;
}

__END__;

=head1 Name

Pricer

=head1 Summary

Simulates a book of orders and the resulting trade costs/benefits

=head1 Usage

C<perl pricer.pl target-size [input file(s)...]>

=over 4

=item target-size

The number of shares you want to simulate buying and selling

=item input file(s)

Any other arguments are assumed to be input files and will be parsed the same
as STDIN

=back

=head2 Examples

    $ perl pricer.pl 200 test.in
    28800758 S 8832.56
    28800796 S NA
    ... snip ...
    28815937 B 8845.00
    28816245 B 8840.00

=head1 Notes

I had this idea when I remembered that perl's arrays are padded on both ends
and that splice() moves elements by blitting from the nearest boundary instead
of always towards the end. Initially, I had just the binary search over the
array to find specific elements, but, since most of the orders are at the head,
I thought that checking the node at int(log(@$arr)/log(2)) first, then using a
linear search starting from the head for the first few elements but a binary
search for the rest of them might speed up lookups for this particular type of
data. It turns out I was right - NYTProf showed that the linear search was used
about as frequently as the binary search, and testing with the large sample
showed this algorithm to be faster than either the linear search through the
linked list or the Red/Black tree.

In this case, I'm using C<v5.10> and I<no> C<strict> or C<warnings> because,
while C<v5.14> has very many nice features, most of them just end up wasting
time, and C<strict> and C<warnings> only matter when you're actively developing
the code, anyway.

=head1 Legal

=head2 License

This program is free software. It comes without any warranty, to
the extent permitted by applicable law. You can redistribute it
and/or modify it under the terms of the Do What The Fuck You Want
To Public License, Version 2, as published by Sam Hocevar. See
http://sam.zoy.org/wtfpl/COPYING for more details.

=head2 Copyright

Copyright (c) 2011 Traian Nedelea <tron1point0@gmail.com>

=cut

