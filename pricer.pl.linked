#!/usr/bin/env perl
# Author: Traian Nedelea <tron1point0@gmail.com>

use v5.14;
use warnings;

package List::Sorted;
# Keeps a pre-sorted linked list. Copied here instead of as a separate module
# to make it easier to just grab the script and run it.

# Accepts a comparator function that will be used to sort the elements in the
# list. The two arguments passed to the comparator are the two elements being
# compared, and, much like the <=> operator, the function should return:
#   -1 if $a < b
#   0  if $a == b
#   1  if $a > b
sub new {
    my $class = shift;
    my ($cmp) = @_;
    $cmp ||= sub {$_[0] <=> $_[1]};
    my $head = [undef,undef];
    bless {
        head => $head,
        cmp => $cmp,
    }, $class;
}

# Inserts an element to the proper position in the pre-sorted list.
#
# Runtime is O(N)
sub insert {
    my $this = shift;
    my ($value) = @_;
    _insert($this->{cmp},\$this->{head},$value);
}
sub _insert {
    my ($cmp,$first,$value) = @_;
    while ($$first->[0]) {
        return $$first = [$value,$$first] if $cmp->($value,$$first->[0]) <= 0;
        $first = \$$first->[1];
    }
    return $$first = [$value,undef];
}

# Returns an element that causes the test function to return 0
# Yes, it's weird, but this mimics the behavior of the <=> operator, so, if you
# have a list of numbers, you can just say
#   sub {$_[0] <=> 3}
# and it will return a ref to the first node that is a 3.
# Returns undef if a matching node doesn't exist.
#
# Runtime is O(N)
sub find {
    my $this = shift;
    my ($cmp) = @_;
    _find($cmp,\$this->{head});
}
sub _find {
    my ($cmp,$first) = @_;
    while (defined $$first->[0]) {
        my $c = $cmp->($$first->[0]);
        return $first if $c == 0;
        return if $c < 0;
        $first = \$$first->[1];
    }
}

# Deletes a node that matches the test function, which itself behaves exactly
# like find()'s test function. Returns undef if a matching node doesn't exist.
#
# Runtime is O(N)
sub delete {
    my $this = shift;
    my ($cmp) = @_;
    my $node = $this->find($cmp);
    $$node = $$node->[1] if $node;
}

sub head {
    my $this = shift;
    return $this->{head};
}

1;

package main;

my $target = 200;   # I keep forgetting to pass it the target >_<
$ARGV[0] and $ARGV[0] =~ /^\d+$/ and $target = shift @ARGV;

# Do the voodoo
sub trade {
    my ($remain, $cost) = ($target,0);
    my ($elem) = @_;
    while ($remain and defined $elem->[0]){
        my $order = $elem->[0];
        my $price = $order->{price};
        my $size = $order->{size};
        $cost += $price * ($size <= $remain ? $size : $remain);
        $remain -= $size;
        $remain = 0, last if $remain <= 0;
        $elem = $elem->[1];
    }
    use integer;
    return sprintf "%d.%02d", $cost/100, $cost%100 unless $remain;
    return 'NA';
}

my %mod = (
    B => 1,
    S => -1,
);

my ($bids,$asks) = (
    # Bids are highest-first
    List::Sorted->new(sub {-1 * &by_price}),
    # Asks are lowest-first
    List::Sorted->new(\&by_price),
);

# Filters for bids and asks
sub by_price {
    return $_[0]{price} <=> $_[1]{price};
}

my %list_for = (
    S => $asks,
    B => $bids,
);

# Swap 'em for the output (You buy other peoples' sells)
my %other = (
    S => 'B',
    B => 'S',
);

# Cachy cache cache cache
my %side_of;
my %price_of;

my %types = (
    # Add and remove are mapped to their input stream definitions because it's
    # easier that way
    A => sub {
        my ($orderId,$side,$price,$size) = @_;
        $price *= 100;

        $side_of{$orderId} = $side;
        $price_of{$orderId} = $price;

        my $list = $list_for{$side};
        my $node = $list->find(sub {$mod{$side} * ($_[0]{price} <=> $price)});
        if ($node) {
            $$node->[0]{size} += $size;
        } else {
            $list->insert({price => $price,size => $size});
        }
        return $other{$side}, trade($list->head);
    },
    R => sub {
        my ($orderId,$size) = @_;

        my $side = $side_of{$orderId};
        my $price = $price_of{$orderId};
        my $list = $list_for{$side};

        my $node = $list->find(sub {$mod{$side} * ($_[0]{price} <=> $price)});
        $$node->[0]->{size} -= $size;
        # Delete the order if it's empty
        $$node = $$node->[1] if $$node->[0]{size} <= 0;

        return $other{$side}, trade($list->head);
    },
);

# Don't tell me what I already know
my %last = (
    S => 'NA',
    B => 'NA',
);

while (<>) {    # *Cackle*
    my ($time,$type,@args) = split ' ', $_;

    my ($side, $value) = $types{$type}->(@args);
    say join ' ', $time, $side, $value if $last{$side} ne $value;
    $last{$side} = $value if $side;
}

__END__;

=head1 Name

Pricer

=head1 Summary

Simulates a book of orders and the resulting trade costs/benefits

=head1 Usage

C<perl pricer.pl target-size [input file(s)...]>

=over 4

=item target-size

The number of shares you want to simulate buying and selling

=item input file(s)

Any other arguments are assumed to be input files and will be parsed the same
as STDIN

=back

=head2 Examples

    $ perl pricer.pl 200 test.in
    28800758 S 8832.56
    28800796 S NA
    ... snip ...
    28815937 B 8845.00
    28816245 B 8840.00

=head1 Notes

So, since the old algorithm was too slow, I have a basic sorted linked list
implementation now. Calculating either additions or removals is always I<O(N)>,
but since most of the action happens towards the heads of the lists, I<N> is
usually less than the total number of open orders on any given side, and unless
all the trading APIs break and all the brokers are out sick, is usually around
half the number of open orders.

Having said that, there B<might> still be room for improvement - depending on
the action, that small I<N> from the linked lists might still be larger than
I<log(N)> of the whole list. I'd have to benchmark it with the linked list, a
binomial heap, and a fibonacci heap to find out, and, since I only have one
day's worth of data, I can't say whether either of the three would be faster
overall, as it depends on the way the orders come in.

As it is right now, running the script over the entire sample data takes 41
seconds on my machine (A great improvement over 8 minutes), with most of that
time spent in C<_find()>. There are fewer than I<2M> calls to C<_find()>,
where I<M> is the number of rows of input data, and C<_find()> itself will go
through, on average, less than the whole set of orders. For reference, it takes
my machine 10 seconds to simply C<cat> the input sample, and much longer than
that to C<sed | uniq> for unique orders.

The old notes for reference:

    I considered keeping track of the current bought & sold shares in a
    priority queue to speed up finding the optimal trade for a given timestamp,
    since that would reduce the calculation time to O(N) on the number of bids
    *or* asks, but it turns out that filter + sort + add is just fine at O(N *
    (2 + log(N))). On all the sample input data, the time to calculate a trade
    was typically less than the time between receiving new trades (with the
    notable exception of market ticks of 0ms), so this could run in real-time
    without modification. If it *does* become necessary, only the C<%types>
    hashmap needs to be changed, since C<trade()> simply takes a list of
    C<order>s.

=head1 Legal

=head2 License

This program is free software. It comes without any warranty, to
the extent permitted by applicable law. You can redistribute it
and/or modify it under the terms of the Do What The Fuck You Want
To Public License, Version 2, as published by Sam Hocevar. See
http://sam.zoy.org/wtfpl/COPYING for more details.

=head2 Copyright

Copyright (c) 2011 Traian Nedelea <tron1point0@gmail.com>

=cut

