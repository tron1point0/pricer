#!/usr/bin/env perl
# Author: Traian Nedelea <tron1point0@gmail.com>

use v5.14;
use strict;
use warnings;
use Carp;

=head1 Name

Pricer

=head1 Summary

Simulates a book of orders and the resulting trade costs/benefits

=head1 Usage

C<perl pricer.pl target-size [input file(s)...]>

=over 4

=item target-size

The number of shares you want to simulate buying and selling

=item input file(s)

Any other arguments are assumed to be input files and will be parsed the same
as STDIN

=back

=head2 Environment

Setting C<PRICER_MODE> to C<perf> will tell you (via C<STDERR>) when the
algorithm takes longer to run than the market tick. C<Calculated> is the
time it took to calculate the trade results and C<Market> is the timestamp
difference between this and the previous order.

=head2 Examples

    $ perl pricer.pl 200 test.in
    28800758 S 8832.56
    28800796 S NA
    ... snip ...
    28815937 B 8845.00
    28816245 B 8840.00

    $ PRICER_MODE=perf pricer.pl 200 pricer.in
    28800758 S 8832.56
    28800796 S NA
    ... snip ...
    Calculated: 1 Market: 0
    ...

=head1 Notes

I considered keeping track of the current bought & sold shares in a priority
queue to speed up finding the optimal trade for a given timestamp, since that
would reduce the calculation time to O(N) on the number of bids *or* asks, but
it turns out that filter + sort + add is just fine at O(N * (2 + log(N))). On
all the sample input data, the time to calculate a trade was typically less
than the time between receiving new trades (with the notable exception of
market ticks of 0ms), so this could run in real-time without modification. If it
*does* become necessary, only the C<%types> hashmap needs to be changed, since
C<trade()> simply takes a list of C<order>s.

=head1 Legal

=head2 License

This program is free software. It comes without any warranty, to
the extent permitted by applicable law. You can redistribute it
and/or modify it under the terms of the Do What The Fuck You Want
To Public License, Version 2, as published by Sam Hocevar. See
http://sam.zoy.org/wtfpl/COPYING for more details.

=head2 Copyright

Copyright (c) 2011 Traian Nedelea <tron1point0@gmail.com>

=cut

sub pre_hook {1};
sub post_hook {1};

if ($ENV{PRICER_MODE} && $ENV{PRICER_MODE} eq 'perf') {
    use Time::HiRes qw(time);

    {   no warnings 'redefine';
        sub time () { Time::HiRes::time * 1000 }

        my ($start,$stop,$market,$last_market) = (0,0,0,0);
        $main::{pre_hook} = sub {
            $start = time;
            $market = /^\d+/;
        };
        $main::{post_hook} = sub {
            $stop = time;
            my ($calc,$mark) = (int($stop - $start),$market - $last_market);
            warn "Calculated: $calc Market: $mark\n" if $calc > $mark;
            $last_market = $market;
        };
    }
}

my $target = 200;   # I keep forgetting to pass it the target >_<
$ARGV[0] =~ /^\d+$/ and $target = shift @ARGV;

sub trade {
    my ($remain, $cost) = ($target,0);
    for (@_) {
        if ($_->{size} <= $remain) {
            $cost += $_->{price} * $_->{size};
            $remain -= $_->{size};
            next;
        } else {
            $cost += $_->{price} * $remain;
            $remain = 0;
            last;
        }
    }
    return sprintf '%0.2f', $cost unless $remain;
    return 'NA';
}

my %orders;

# Filters for %orders
sub by_price {$a->{price} <=> $b->{price}}
sub bids () {reverse sort {by_price} grep {$_->{side} eq 'B'} values %orders}
sub asks () {sort {by_price} grep {$_->{side} eq 'S'} values %orders}

# If we don't know the specific filter to use
sub side ($) {shift eq 'S' ? asks : bids}

# Swap 'em
sub other ($) {shift eq 'S' ? 'B' : 'S'}

# Because the orders are structs, not objects
sub struct (&$) {
    my ($fn,$name) = @_;
    $main::{$name} = sub {return {&$fn}};
}

struct {
    side => shift,
    price => shift,
    size => shift,
} 'order';

# Eat your heart out, Java
my %types = (
    # Adding an order (only mapped this way because it's easier to compare
    # directly to the input stream).
    A => sub {
        my ($orderId,$side,$price,$size) = @_;
        croak "Couldn't parse '@_'. Skipping." unless
            $orderId &&
            $side =~ /^[BS]$/ &&
            $price &&
            $size;

        $orders{$orderId} = order($side,$price,$size);
        return other($side), trade(side($side));
    },
    # And removing an order
    R => sub {
        my ($orderId,$size) = @_;
        croak "Couldn't parse '@_'. Skipping." unless
            $orderId &&
            $size;

        my $side = $orders{$orderId}->{side};
        $orders{$orderId}->{size} -= $size;
        delete $orders{$orderId} if $orders{$orderId}->{size} <= 0;
        return other($side), trade(side($side));
    },
);

my %last = (
    S => 'NA',
    B => 'NA',
);
while (<>) {    # *Cackle*
    pre_hook($_);

    my ($time,$type,@args) = split;
    carp("Couldn't parse '$_'. Skipping."),next unless
        $time =~ /^\d+$/ &&
        $type =~ /^[AR]$/ &&
        @args;

    my ($side, $value) = $types{$type}->(@args);
    say join ' ', $time, $side, $value unless
        $last{$side} eq $value;   # Don't tell me what I already know
    $last{$side} = $value;

    post_hook($time,$side,$value);
}
